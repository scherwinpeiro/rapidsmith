
plugins {
	id 'java-library'
	id 'maven-publish'
	id "com.jfrog.artifactory" version "4.5.4"
}

sourceCompatibility = JavaVersion.VERSION_1_8

boolean isCi


String buildNumber = System.getenv("BUILD_NUMBER")
if (buildNumber) {
	isCi = true
} else {
	isCi = false
}

String buildVersion = null
if (isCi) {
	if (hasProperty("releaseType")) {
		if (releaseType == "release") {
			buildVersion = ""
		} else if (releaseType == "rc") {
			buildVersion = "-rc-$buildNumber"
		} else if (releaseType == "dev") {
			buildVersion = "-dev-$buildNumber"
		} else if (releaseType == "none") {
			buildVersion = "-build-$buildNumber"
		} else {
			throw new Exception("Property 'releaseType' configured with invalid value '$releaseType'")
		}
	} else {
		buildVersion = "-build-$buildNumber"
	}
}
if (buildVersion == null) {
	buildVersion = "-SNAPSHOT"
}

group = 'de.tu_darmstadt.rs.rapidsmith'
version = "$majorVersion.$minorVersion.${patchVersion}$buildVersion"

sourceSets {
	main {
		java {
			srcDir 'src'
		}
		resources {
			srcDir 'resources'
		}
	}
	test {
		java {
			srcDir 'test'
		}
	}
}
allprojects {
repositories {
	mavenCentral()
	jcenter()
	maven {
		name 'uqbar'
		url 'http://uqbar-wiki.org/mvn/releases/'
	}
	maven {
		name 'rs'
		url 'https://www.rs.tu-darmstadt.de/artifactory/gradle-release'
	}
}
}

if (!hasProperty('slfjVersion'))
	ext.slfjVersion = '1.7.21'
if (!hasProperty('log4jVersion'))
	ext.log4jVersion = '2.6.2'
if (!hasProperty('jcommanderVersion'))
	ext.jcommanderVersion = '1.56'
if(!hasProperty('jacksonVersion'))
	ext.jacksonVersion = '2.8.8'

dependencies {
	implementation 'net.sf.jopt-simple:jopt-simple:3.2'


	implementation 'com.caucho:hessian:4.0.7'
	implementation 'org.apache.commons:commons-math3:3.5'

	implementation "com.beust:jcommander:$jcommanderVersion"

	implementation "org.slf4j:slf4j-api:1.7.21"
//	compile "org.slf4j:slf4j-ext:1.7.21"

	api "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
	api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

	implementation 'de.tu_darmstadt.rs.util:tracer:0.4.7'

	runtime "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
	runtime "org.apache.logging.log4j:log4j-core:$log4jVersion"



	implementation "org.apache.xmlgraphics:batik-svggen:1.8"
	implementation "org.apache.xmlgraphics:batik-svg-dom:1.8"
	implementation("org.apache.xmlgraphics:batik-swing:1.8") {
		exclude module: "jython"
		exclude module: "rhino"
	}


	testCompile "org.spockframework:spock-core:1.0-groovy-2.4"

	testCompile "junit:junit:4.12"

}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

def deviceIndexDir = "$buildDir/deviceIndex"

task devicesIndex(type: DeviceIndexerTask) {
	inputDir = file('devices')
	outputDir = file("$deviceIndexDir/edu/byu/ece/rapidSmith/device/database")
}

sourceSets {
	main {
		output.dir(deviceIndexDir, builtBy: 'devicesIndex')
	}
}

// add javadoc/source jar tasks as artifacts
artifacts {
	archives sourcesJar,
			javadocJar,
			jar
}

def moduleName = "de.tu_darmstadt.rs.rapidsmith"

jar {
	inputs.property("moduleName", moduleName)
	inputs.property("buildType", buildNumber? "CI" : "SNAPSHOT") // We want to reuse Jars that contain the correct classes, but still have the manifest traceable to the originating build!
	manifest {
		attributes('Automatic-Module-Name': moduleName)
		if (buildNumber) {
			attributes('CI-Build-Number': buildNumber)
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourcesJar {
				classifier "sources"
			}

			artifact javadocJar {
				classifier "javadoc"
			}
		}
	}
}

task checkPublish {
	doLast {
		def currentVersion = "$majorVersion.$minorVersion.${patchVersion}"
		if (project.hasProperty("publishVersion") && currentVersion != publishVersion) {
			throw new Exception("The targeted version for publishing ($publishVersion) does not match the actual version $currentVersion")
		}
		if (version.contains("build")) {
			throw new Exception("Only libraries of releaseType release, rc, dev may be published!")
		}
	}

	tasks.artifactoryPublish.dependsOn(it)
}

artifactory {
	contextUrl = "https://www.rs.tu-darmstadt.de/artifactory"
	publish {
		repository {
			repoKey = "gradle-dev-local"
		}
		defaults {
			publications "mavenJava"
		}
	}
}

/*run {

	args 'xc6slx16csg324'

    standardInput = System.in
}*/
